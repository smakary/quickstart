package org.jboss.as.quickstarts.ws_security.wsclient;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.4.6
 * 2012-02-29T14:34:30.562-05:00
 * Generated source version: 2.4.6
 * 
 */

@WebServiceClient(name = "SecuredService", 
wsdlLocation = "http://localhost:8080/ws-security/SecuredService?wsdl",
//wsdlLocation = "securedwsi.wsdl",
targetNamespace = "http://jboss.org/as/quickstarts/wssecurity") 
public class SecuredService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://jboss.org/as/quickstarts/wssecurity", "SecuredService");
    public final static QName SecuredServicePort = new QName("http://jboss.org/as/quickstarts/wssecurity", "SecuredServicePort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/ws-security/SecuredService?wsdl");
        	//url = new URL("/webapp/wsdl/securedwsi.wsdl");
        	//url = new URL("/securedwsi.wsdl");
        	
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SecuredService_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:///securedwsi.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SecuredService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SecuredService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SecuredService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns SecuredService
     */
    @WebEndpoint(name = "SecuredServicePort")
    public SecuredService getSecuredServicePort() {
        return super.getPort(SecuredServicePort, SecuredService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SecuredService
     */
    @WebEndpoint(name = "SecuredServicePort")
    public SecuredService getSecuredServicePort(WebServiceFeature... features) {
        return super.getPort(SecuredServicePort, SecuredService.class, features);
    }

}
